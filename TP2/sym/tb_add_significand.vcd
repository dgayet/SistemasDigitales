$date
  Tue Nov  7 02:39:47 2023
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module numeric_std $end
$upscope $end
$scope module tb_add_significand $end
$var reg 21 ! fx[20:0] $end
$var reg 21 " fy[20:0] $end
$var reg 1 # is_0 $end
$var reg 2 $ saturation[1:0] $end
$var reg 8 % exp_diff[7:0] $end
$var reg 2 & flag_2c[1:0] $end
$var reg 21 ' fz[20:0] $end
$var integer 32 ( index $end
$scope module sig $end
$var reg 21 ) fx[20:0] $end
$var reg 21 * fy[20:0] $end
$var reg 1 + is_0 $end
$var reg 2 , saturation[1:0] $end
$var reg 8 - exp_diff[7:0] $end
$var reg 2 . flag_2c[1:0] $end
$var reg 21 / fz[20:0] $end
$var integer 32 0 index $end
$var reg 22 1 fx_ext[21:0] $end
$var reg 22 2 fy_ext[21:0] $end
$var reg 8 3 abs_exp_diff[7:0] $end
$var reg 149 4 aligned_fx[148:0] $end
$var reg 149 5 aligned_fy[148:0] $end
$var reg 150 6 mx[149:0] $end
$var reg 150 7 my[149:0] $end
$var reg 150 8 mz_pre[149:0] $end
$var reg 150 9 mz[149:0] $end
$var reg 21 : fz_pre[20:0] $end
$var integer 32 ; aux_index $end
$var integer 32 < lower_index $end
$var integer 32 = upper_index $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b110100111101000011000 !
b001101000101001010110 "
1#
b00 $
b11101110 %
b00 &
bUUUUUUUUUUUUUUUUUUUUU '
b0 (
b110100111101000011000 )
b001101000101001010110 *
1+
b00 ,
b11101110 -
b00 .
bUUUUUUUUUUUUUUUUUUUUU /
b0 0
b1001101000101001010110 1
b1110100111101000011000 2
b00010010 3
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001001101000101001010110000000000000000000 4
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110100111101000011000 5
b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001001101000101001010110000000000000000000 6
b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110100111101000011000 7
b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001001101000101001100100100111101000011000 8
b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001001101000101001100100100111101000011000 9
b001101000101001100100 :
b100111 ;
b10010 <
b100110 =
#10000000000
b000001001001100110000 !
b000001001001100011100 "
b00000000 %
b01 &
b11111111111111111111111111101111 (
b000001001001100110000 )
b000001001001100011100 *
b00000000 -
b01 .
b11111111111111111111111111101111 0
b1000001001001100110000 1
b1000001001001100011100 2
b00000000 3
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000001001001100110000 4
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000001001001100011100 5
b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000001001001100110000 6
b111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110111110110110011100100 7
b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010100 8
b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010100 9
b010000000000000000000 :
b100 ;
b0 <
b11 =
#20000000000
0#
0+
